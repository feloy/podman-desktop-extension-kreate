{
  "commands": [
    {
      "name": "configmap",
      "args": [
        {
          "name": "name",
          "label": "Name",
          "description": "Name of the configmap to create",
          "required": true
        }
      ],
      "options": [
        {
          "flag": "--from-literal",
          "label": "Literal values",
          "description": "Specify a key and literal value to insert in configmap",
          "type": "key-value",
          "multiple": true,
          "repeatFlag": true
        },
        {
          "flag": "--from-env-file",
          "label": "From Env file",
          "description": "Specify the path to a file to read lines of key=val pairs to create a configmap",
          "type": "file",
          "multiple": true,
          "repeatFlag": true
        },
        {
          "flag": "--from-file",
          "label": "From file",
          "description": "Key file can be specified using its file path, in which case file basename will be used as configmap key, or optionally with a key and file path, in which case the given key will be used.  Specifying a directory will iterate each named file in the directory whose basename is a valid configmap key",
          "type": "key-fileOrDirectory",
          "multiple": true,
          "repeatFlag": true
        }
      ]
    },
    {
      "name": "deployment",
      "args": [
        {
          "name": "name",
          "label": "Name",
          "description": "Name of the deployment to create",
          "required": true
        }
      ],
      "options": [
        {
          "flag": "--image",
          "label": "Image",
          "description": "Image to use for the container",
          "type": "string",
          "multiple": false
        },
        {
          "flag": "--",
          "label": "Command and args",
          "description": "Command and args for the container",
          "type": "string",
          "multiple": true,
          "repeatFlag": false
        }
      ]
    },
    {
      "name": "ingress",
      "args": [
        {
          "name": "name",
          "label": "Name",
          "description": "Name of the ingress to create",
          "required": true
        }
      ],
      "options": [
        {
          "flag": "--annotation",
          "label": "Annotations",
          "description": "Annotation to insert in the ingress object",
          "type": "key-value",
          "multiple": true,
          "repeatFlag": true
        },
        {
          "flag": "--default-backend",
          "label": "Default backend",
          "description": "Default service for backend, in format of svcname:port",
          "type": "string",
          "multiple": false
        },
        {
          "flag": "--class",
          "label": "Class",
          "description": "Ingress Class to be used",
          "type": "string",
          "multiple": false
        },
        {
          "flag": "--rule",
          "label": "Rules",
          "description": "Rule in format host/path=service:port[,tls=secretname]. Paths containing the leading character '*' are considered pathType=Prefix. tls argument is optional",
          "type": "string",
          "multiple": true,
          "repeatFlag": true
        }
      ]
    },
    {
      "name": "secret",
      "commands": [
        {
          "name": "docker-registry",
          "args": [
            {
              "name": "name",
              "label": "Name",
              "description": "Name of the Docker Registry secret to create",
              "required": true
            }
          ],
          "options": [
            {
              "flag": "--docker-server",
              "label": "Docker server",
              "description": "Server location for Docker registry",
              "type": "string",
              "multiple": false
            },
            {
              "flag": "--docker-email",
              "label": "Docker email",
              "description": "Email for Docker registry",
              "type": "string",
              "multiple": false
            },
            {
              "flag": "--docker-username",
              "label": "Docker username",
              "description": "Username for Docker registry authentication",
              "type": "string",
              "multiple": false
            },
            {
              "flag": "--docker-password",
              "label": "Docker password",
              "description": "Password for Docker registry authentication",
              "type": "password",
              "multiple": false
            }
          ]
        },
        {
          "name": "generic",
          "args": [
            {
              "name": "name",
              "label": "Name",
              "description": "Name of the Generic secret to create",
              "required": true
            }
          ],
          "options": [
            {
              "flag": "--from-literal",
              "label": "Literal values",
              "description": "Specify a key and literal value to insert in secret",
              "type": "key-value",
              "multiple": true,
              "repeatFlag": true
            }    
          ]
        },
        {
          "name": "tls",
          "args": [
            {
              "name": "name",
              "label": "Name",
              "description": "Name of the TLS secret to create",
              "required": true
            }
          ],
          "options": [
            {
              "flag": "--cert",
              "label": "Certificate",
              "description": "Path to PEM encoded public key certificate",
              "type": "file",
              "multiple": false
            },
            {
              "flag": "--key",
              "label": "Private key",
              "description": "Path to private key associated with given certificate",
              "type": "file",
              "multiple": false
            }    
          ]
        }
      ]
    },
    {
      "name": "service",
      "commands": [
        {
          "name": "clusterip"
        },
        {
          "name": "externalname"
        },
        {
          "name": "loadbalancer"
        },
        {
          "name": "nodeport"
        }
      ]
    }
  ]
}